rsyslog2db - put syslog events in sqlite with db normalization

Dependencies:
  Perl modules:
    JSON
    DBI
    DBD::SQLite3

In debian/ubuntu:

  apt-get install libjson-perl libdbi-perl libdbd-sqlite3-perl

Instead of a flat list of syslog messages as is easily provided by the
omlibdbi module distributed with rsyslog, we split it up to a group of
tables:

  hosts
  facilities
  programs
  severities
  events

facilities and severities are created as:

  CREATE TABLE facilities (
    id INTEGER PRIMARY KEY,
    name VARCHAR(16) UNIQUE ON CONFLICT IGNORE
  )

programs and hosts are created as:

  CREATE TABLE programs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name VARCHAR(128) UNIQUE ON CONFLICT IGNORE
  )

events is created as:

  CREATE TABLE events (
    host INTEGER NOT NULL REFERENCES hosts(id),
    facility INTEGER NOT NULL REFERENCES facilities(id),
    program INTEGER NOT NULL REFERENCES programs(id),
    pid INTEGER,
    severity INTEGER NOT NULL REFERENCES severities(id),
    msg TEXT NOT NULL,
    time INTEGER NOT NULL,
    registered INTEGER NOT NULL
  );

Currently, there's a naive approach for trying to upsert new entries in
the tables. If we get for instance a severity id from rsyslog that we
haven't seen before, we will insert the new id and associate it with the
name supplied by rsyslog (i.e. the first one wins when it comes to
naming the {severity, facility} ids). For programs and hosts, the
situation is similar; but instead of being fed a numeric id from rsyslog,
we invent it on our own by asking sqlite for it (using the AUTOINCREMENT
mechanism).

When working with a single sqlite3 database, you deal with the same
parallelism constraints that you would when dealing directly with
sqlite3. You should therefore probably not run two rsylog2db at the same
time (when working against the same database). This means that you can't
have several rsyslog actions that all point to the same database. You
should instead either create rsyslog rulesets or use mutliple databases.

It's a quick hack. I wouldn't disable regular logging mechanisms when
using this, but maybe it turns out to work out fine. Let's wait and see!

I also implemented a simple "viewer", where you can query by
host/facility/program/severity (see rsyslog2db-viewer).

  # possible filter flags: facility, severity, program, host
  rsyslog2db-viewer --program rsyslogd

  # For severity, you can use --min-severity to show msgs of at least this level
  rsyslog2db-viewer --min-severity notice

  # Filter further by adding more commands; they are "AND:ed togheter"
  rsyslog2db-viewer --facility kern --min-severity err

  # List the available filterable data keys:
  rsyslog2db-viewer --list-hosts
  rsyslog2db-viewer --list-facilities
  rsyslog2db-viewer --list-programs
  rsyslog2db-viewer --list-severities

Finally, a simple rsyslog.conf fragment is included as an example.

Missing stuff:
 * Logging database errors (! this one is important, maybe?)
 * Query events by time ranges
 * migrations/versioning of schema
 * DB cleanup
 * Colors?
